#!/usr/bin/env python3

import readline
import platform
from glob import glob
import argparse
import shlex
import subprocess
import sys
import os
import shutil

def install_apt():
    subprocess.check_call([
        "sudo",
        "apt",
        "update",
    ])
    subprocess.check_call([
        "sudo",
        "apt",
        "install",
        "-y",
        "build-essential",
        "curl",
        "git",
        "lld",
        "clang",
        "llvm",
        "pkg-config",
        "clang-format",
    ])
def install_dnf():
    subprocess.check_call([
        "dnf",
        "install",
        "-y",
        "curl",
        "git",
        "lld",
        "clang",
        "llvm",
        "pkg-config",
        "clang-tools-extra",
    ])
def install_bazelisk():
    osys = platform.system().lower()
    arch = platform.machine().lower()
    if arch == 'x86_64':
        arch = 'amd64'
    elif arch == 'aarch64':
        arch = 'arm64'
    subprocess.check_call([
        "curl", "-SL", "-o", "/tmp/bazel",
        f"https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-{osys}-{arch}"
    ])
    subprocess.check_call(["chmod", "+x", "/tmp/bazel"])
    subprocess.check_call(["sudo", "mkdir", "-p", "/usr/local/bin"])
    subprocess.check_call(["sudo", "mv", "/tmp/bazel", "/usr/local/bin/bazel"])

def install_deps():
    if platform.system() == "Darwin":
        install_bazelisk()
        return
    os_id = None
    try:
        with open('/etc/os-release', 'r') as f:
            for line in f.readlines():
                if line.startswith("ID="):
                    os_id = line.removeprefix("ID=").strip()
    except:
        pass

    if os_id is None:
        print("Unsupported operating system")
        return 1

    if os_id == "ubuntu":
        install_apt()
        install_bazelisk()
    elif os_id == "fedora":
        install_dnf()
        install_bazelisk()
    else:
        print("Unsupported operating system: ", os_id)
        return 1



# Refresh lsp command
def rlsp():
    subprocess.check_call(["bazel", "run", "//:refresh_lsp"])

def fmt():
    for file in glob("**/*.cc", recursive=True) + glob("**/*.h", recursive=True):
        if file.startswith("external/"):
            continue
        subprocess.check_call([
            "clang-format",
            "-i",
            file,
        ])

parser = argparse.ArgumentParser(exit_on_error=False)
subparsers = parser.add_subparsers()

parser_lsp = subparsers.add_parser('rlsp')
parser_lsp.set_defaults(func=rlsp)

parser_deps = subparsers.add_parser('setup')
parser_deps.set_defaults(func=install_deps)

parser_deps = subparsers.add_parser('fmt')
parser_deps.set_defaults(func=fmt)

def print_help():
    print(parser.format_help())


def evaluate(line):
    args = None
    try:
        args = parser.parse_args(shlex.split(line))
    except argparse.ArgumentError:
        pass
    if args is not None and hasattr(args, 'func'):
        args.func()
    else:
        print("unknown command")
        print_help()

if __name__ == '__main__':
    # Dispatch the function or loop
    args = parser.parse_args()
    if hasattr(args, 'func'):
        ret_code = args.func()
        sys.exit(ret_code)
    else:
        while True:
            try:
                line = input('>>> ')
                evaluate(line)
            except EOFError:
                break
    
